// Name: Steve Regala
// USC NetID: sregala
// CS 455 PA4
// Fall 2021

import java.util.ArrayList;

/**
   A Rack of Scrabble tiles
   This class holds the object of type rack and will store the original rack given by the user.
   In other words, it will store the current rack; a new rack object is created for every rack that
   the user inputs.
 */
public class Rack {

   /**
      Representation Invariant:
      - originalRack can be initialized to whatever the user decides to input
      - originalRack can be any combination of characters
    */
   private String originalRack;


   /**
      Rack constructor
      Create the rack object and initialize the private instance variable with the string given by the user.
      This could be any string the user decides to input
      @param original  this will be provided by the user, whatever rack they may decide to input.
    */
   public Rack(String original) {
      originalRack = original;
   }


   /**
     Returns the original rack given by the user (used in the main program).
     @return  the originalRack instance variable
    */
   public String getOriginalRack() {
      return originalRack;
   }


   /**
     This is a wrapper method for the allSubsets() method.
     Returns an array list of subsets for the given rack. it calls the two private helper methods that
     (1) generate a uniquely lettered rack and (2) generate the multiplicity array for the allSubsets() method.
     @return  an arrayList of subsets for the original rack.
    */
   public ArrayList<String> allSubsetsWrap() {
      int[] multArr = multArrHelper(originalRack, toUniqueHelper(originalRack));
      return allSubsets(toUniqueHelper(originalRack), multArr, 0);
   }



   // ------------------------------- PRIVATE HElPER METHODS BELOW -------------------------------



   /**
     This is a private helper method to formulate the uniquely-lettered string from the original rack.
     In other words, it converts the original rack into a string without any duplicate letters. This conversion
     to a unique string is necessary for forming the multiplicity array needed for the allSubsets() method.
     @param original  originalRack instance variable is passed through this.
     @return  a string of the unique letters in the original rack, i.e. no duplicate letters in return value
    */
   private String toUniqueHelper(String original) {

      String newRack = "";

      for (int i=0; i < originalRack.length(); i++) {
         int j;
         for (j=0; j < i; j++) {
            char charVar1 = originalRack.charAt(i);
            char charVar2 = originalRack.charAt(j);

            if (charVar1 == charVar2) {
               break;
            }
         }

         if (i == j) {
            newRack += originalRack.charAt(i);     // if both letters lie on the same index, it is a new letter so add
         }
      }
      return newRack;
   }


   /**
      This is a private helper method to get the count of each letter from the original rack.
      The array returned by this method is used in the given allSubsets() method.
      PRE: original is the originalRack instance variable, and unique is the originalRack passed through the
           toUniqueHelper() method
      @param original  represents the original rack that is passed through here
      @param unique  represents the unique rack that is generated by the toUniqueHelper() method
      @return  an array that holds the multiplicity of each unique letter from the original rack
    */
   private int[] multArrHelper(String original, String unique) {

      int[] tempMultArr = new int[unique.length()];
      for (int i=0; i<unique.length(); i++) {
         char letter = unique.charAt(i);
         int count = 0;

         for (int j=0; j<original.length(); j++) {
            if (letter == original.charAt(j)) {
               count++;
            }
         }

         tempMultArr[i] = count;
      }

      return tempMultArr;
   }


   /**
      Finds all subsets of the multiset starting at position k in unique and mult.
      unique and mult describe a multiset such that mult[i] is the multiplicity of the char
           unique.charAt(i).
      PRE: mult.length must be at least as big as unique.length()
           0 <= k <= unique.length()
      @param unique a string of unique letters
      @param mult the multiplicity of each letter from unique.  
      @param k the smallest index of unique and mult to consider.
      @return all subsets of the indicated multiset.  Unlike the multiset in the parameters,
      each subset is represented as a String that can have repeated characters in it.
      @author Claire Bono
    */
   private static ArrayList<String> allSubsets(String unique, int[] mult, int k) {
      ArrayList<String> allCombos = new ArrayList<>();
      
      if (k == unique.length()) {  // multiset is empty
         allCombos.add("");
         return allCombos;
      }
      
      // get all subsets of the multiset without the first unique char
      ArrayList<String> restCombos = allSubsets(unique, mult, k+1);
      
      // prepend all possible numbers of the first char (i.e., the one at position k) 
      // to the front of each string in restCombos.  Suppose that char is 'a'...
      
      String firstPart = "";          // in outer loop firstPart takes on the values: "", "a", "aa", ...
      for (int n = 0; n <= mult[k]; n++) {   
         for (int i = 0; i < restCombos.size(); i++) {  // for each of the subsets 
                                                        // we found in the recursive call
            // create and add a new string with n 'a's in front of that subset
            allCombos.add(firstPart + restCombos.get(i));  
         }
         firstPart += unique.charAt(k);  // append another instance of 'a' to the first part
      }
      
      return allCombos;
   }

}