// Name: Steve Regala
// USC NetID: sregala
// CS 455 PA4
// Fall 2021

import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.ArrayList;

/**
   This contains the main method. This class will have a main that's responsible for processing
   the command-line argument, and handling any error processing. It also holds the main command loop.
 */
public class WordFinder {

   public static void main(String[] args) {

      String fileName = "";
      if (args.length > 0) {
         fileName = args[0];
      }

      runProgram(fileName);
   }


   /**
      This method will help run the main program to process the provided dictionary and will do an error-check.
      The try-catch blocks are in this private method. This method calls a private method that will output the
      desired results. Mainly the error checking and preprocessing of the dictionary take place in here, as well
      as the user inputs.
      @param nameFile  either an empty string, or a string inputted by the user
    */
   private static void runProgram(String nameFile) {

      String nameOfFile = nameFile;
      try {
         if (nameOfFile.length() == 0) {
            nameOfFile = "sowpods.txt";
         }

         AnagramDictionary dictionary = new AnagramDictionary(nameOfFile);

         System.out.println("Type . to quit.");
         Scanner input = new Scanner(System.in);
         System.out.print("Rack? ");

         String userInput = input.next();
         boolean done = false;

         if (userInput.equals(".")) {
            done = true;
         }

         while (!done) {
            if (userInput.equals(".")) {
               done = true; // possibly just break?
            }

            if (!done) {
               // helper method here to perform everything
               Rack ourRack = new Rack(userInput);
               findWords(dictionary, ourRack);

               System.out.print("Rack? ");
               userInput = input.next();
            }
         }

      }

      catch (IllegalDictionaryException exception) {
         System.out.println(exception.getMessage());
         System.out.println("Exiting program.");
      }
      catch (FileNotFoundException exception) {
         System.out.println("ERROR: Dictionary file \"" + nameOfFile + "\" does not exist.");
         System.out.println("Exiting program.");
      }

   }


   /**
      This method will output the desired results. It creates an object of type ScoreTable, and it will
      print the words with their scores that could be made from the given rack.
      @param dictionaryInput  this is the object of type AnagramDictionary created in runProgram()
      @param rackInput  this is the object of type Rack created in runProgram()
    */
   private static void findWords(AnagramDictionary dictionaryInput, Rack rackInput) {

      ArrayList<String> listOfSubsets = rackInput.allSubsetsWrap();
      ArrayList<String> listOfAnagrams = new ArrayList<>();

      // get the anagrams list for each item in the subset generated by allSubsetsWrap in Rack class
      for (String item: listOfSubsets) {
         listOfAnagrams.addAll(dictionaryInput.getAnagramsOf(item));   // combine array list of anagrams for a subset with another array list of anagrams for another subset
      }

      ScoreTable tableOfScores = new ScoreTable(listOfAnagrams);       // ScoreTable object is created here after the finalized list of anagrams
      if (tableOfScores.getSize() == 0) {
         System.out.println("We can make " + tableOfScores.getSize() + " words from " + "\"" + rackInput.getOriginalRack() + "\"");
      }

      else {
         System.out.println("We can make " + tableOfScores.getSize() + " words from " + "\"" + rackInput.getOriginalRack() + "\"");
         System.out.println("All of the words with their scores (sorted by score):");
      }
      tableOfScores.printSorted();
   }

}






